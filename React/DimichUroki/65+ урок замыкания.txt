«Лексическое окружение» – это специальный внутренний объект.
 Мы не можем получить его в нашем коде и изменять напрямую.
 Сам движок JavaScript может оптимизировать его,
 уничтожать неиспользуемые переменные для освобождения памяти и выполнять другие внутренние уловки,
 но видимое поведение объекта должно оставаться таким, как было описано.

Все функции «при рождении» получают скрытое свойство [[Environment]],
 которое ссылается на лексическое окружение места, где они были созданы.


В программировании есть общий термин: «замыкание», – которое должен знать каждый разработчик.

Замыкание – это функция, которая запоминает свои внешние переменные и может получить к ним доступ.
 В некоторых языках это невозможно, или функция должна быть написана специальным образом,
 чтобы получилось замыкание. Но, как было описано выше, в JavaScript,
 все функции изначально являются замыканиями (есть только одно исключение,
 про которое будет рассказано в Синтаксис "new Function").

То есть они автоматически запоминают, где были созданы, с помощью скрытого свойства [[Environment]],
 и все они могут получить доступ к внешним переменным.

Когда на собеседовании фронтенд-разработчик получает вопрос: «что такое замыкание?»,
 – правильным ответом будет определение замыкания и объяснения того факта, 
что все функции в JavaScript являются замыканиями, и, может быть,
 несколько слов о технических деталях: свойстве [[Environment]] и о том, как работает лексическое окружение.




почему после sum 2 скобки function sum(a){
      return function(b){
          return a + b
      }
  }
alert(sum(3)(-2))
Это функция каррирования (currying) - процесс преобразования функции с множеством аргументов в цепочку функций 
с одним аргументом. В данном случае, функция sum возвращает другую функцию,
 которая принимает один аргумент b и возвращает сумму a + b, где a - это значение,
 которое было передано в первый вызов sum(3). Таким образом, sum(3)(-2) возвращает 3 + (-2) = 1.